import asyncio
import json
import websockets
from typing import Callable
import logging

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

WS_URL = 'wss://www.seismicportal.eu/standing_order/websocket'
RECONNECT_DELAY = 5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

async def earthquake_listener(callback: Callable[[float, list, str], None]):
    while True:
        try:
            async with websockets.connect(WS_URL, ping_interval=30, ping_timeout=10) as websocket:
                logger.info("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω. –°–ª—É—à–∞–µ–º –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏—è...")
                
                while True:
                    try:
                        message = await websocket.recv()
                        data = json.loads(message)

                        if data.get("action") != "create":
                            continue

                        props = data["data"]["properties"]
                        coords = data["data"]["geometry"]["coordinates"]
                        magnitude = props.get("mag")
                        flynn_region = props.get("flynn_region")
                        
                        logger.info(f"üåç –ó–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ M{magnitude} –Ω–∞ {coords}")
                        await callback(magnitude, coords, flynn_region)

                    except websockets.exceptions.ConnectionClosed:
                        logger.warning("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
                        break
                    except json.JSONDecodeError as e:
                        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
                        continue
                    except Exception as e:
                        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        continue

        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {RECONNECT_DELAY} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º...")
            await asyncio.sleep(RECONNECT_DELAY)